

import java.io.*;
import java.net.*;
import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.*;
import java.util.*;
import java.awt.event.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;

public class ReceiveImage extends javax.swing.JFrame implements Runnable, MouseListener, KeyListener{

    /**
     * Creates new form Login
     */
        Socket s;
	static JFrame editorFrame;
 	static JLabel jLabel;
	static int x,y;
	static boolean click = false, type = false; 
	static Scanner sc;	
	// static char key;
	static List<Character> keys;
	ObjectOutputStream os;
        Thread t;
    public ReceiveImage(Socket s) {
        initComponents();
        this.setVisible(true);
        try{
		this.s = s;
		keys = new ArrayList();
		sc = new Scanner(System.in);
		t = new Thread(this);
		editorFrame = new JFrame("Image Demo");
		jLabel  = new JLabel();
                editorFrame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                Dimension myScreenSize = Toolkit.getDefaultToolkit().getScreenSize();
		editorFrame.setSize(myScreenSize);
                editorFrame.setVisible(true);
   		jLabel.setBounds(0,0, (int) myScreenSize.getWidth(), (int) myScreenSize.getHeight());
   		os = new ObjectOutputStream(s.getOutputStream());
   	}catch(IOException e){
   		e.printStackTrace();
   	}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtUsername = new javax.swing.JTextField();
        jbtnLogin = new javax.swing.JButton();
        jbtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Receive Images from");

        jbtnLogin.setText("Login");
        jbtnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLoginActionPerformed(evt);
            }
        });

        jbtnClose.setText("x");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel1)
                        .addGap(103, 103, 103)
                        .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnClose)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(jbtnLogin)
                .addContainerGap(284, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(137, 137, 137)
                .addComponent(jbtnLogin)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLoginActionPerformed
        // TODO add your handling code here:
        if(jtxtUsername.getText() != "" ){
            t.start();
        }
            
        else
            JOptionPane.showMessageDialog(this, "USername or password is empty", "Fill", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnLoginActionPerformed
    
    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        // TODO add your handling code here:
        int ans = JOptionPane.showConfirmDialog(this, "Are you sure you wanna exit?", "Login",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(ans == JOptionPane.YES_OPTION){
            setVisible(false); //you can't see me!
            dispose();
        }
    }//GEN-LAST:event_jbtnCloseActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ReceiveImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ReceiveImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ReceiveImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ReceiveImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
    }
    public void run(){
 		int i = 1;
 		System.out.println("You are connected to : ");
 		String name = jtxtUsername.getText();
 		
 		while(true){
 		try{
                    System.out.println("I am receiving Image");
                    ObjectInputStream is=new ObjectInputStream(s.getInputStream());
		    ImageData obj=(ImageData)is.readUnshared();
		    Thread.sleep(100);

		    byte[] image = obj.getImage();
		    ByteArrayInputStream bis = new ByteArrayInputStream(image);
                    BufferedImage bimage = ImageIO.read(bis);
                    ImageIcon imageicon = new ImageIcon(bimage);
		    editorFrame.setLayout(null);
                    editorFrame.add(jLabel);
                    jLabel.setIcon(imageicon);
                    editorFrame.addMouseListener(this);
                    editorFrame.addKeyListener(this);

                    SendEvent se = new SendEvent(s,x,y,click,type,keys,name,os);
        	

    	}
	 	
	 	catch(Exception e){}
	 }
	}
	public void mouseClicked(MouseEvent me){
		x = me.getX();
		y = me.getY();
		click = true;
		type = false;
		// System.out.println("Mouse Clicked at: " + x + " and " + y);
	}
	public void mousePressed(MouseEvent me){
		x = me.getX();
		y = me.getY();
		click = true;
		type = false;
		// System.out.println("Mouse pressed at " + me.getX() + " "+ me.getY());
	}
	public void mouseReleased(MouseEvent me){
		x = me.getX();
		y = me.getY();
		click = false;
		type = false;
		// System.out.println("Mouse Released at " + me.getX() +" "+ me.getY());
	}
	public void mouseExited(MouseEvent me){
		x = me.getX();
		y = me.getY();
		click = false;
		type = false;
		// System.out.println("Mouse Exited at: " + me.getX() +" "+ me.getY());
	}
	public void mouseEntered(MouseEvent me){
		x = me.getX();
		y = me.getY();
		click = false;
		type = false;
		// System.out.println("Mouse Entered at: "+ me.getX() +" "+ me.getY());
	}
	public void keyPressed(KeyEvent e) {  
		type = false;
        // System.out.println("Key Pressed"+ e.getKeyChar());  

    }  
    public void keyReleased(KeyEvent e) {  
        // System.out.println("Key Released" + e.getKeyChar()); 
        type = false;
    }  
    public void keyTyped(KeyEvent e) {  
        System.out.println("Key Typed" + e.getKeyChar());  
        char key = e.getKeyChar();
        keys.add(key);
        for(Character ch: keys){
        	System.out.println(ch+" in the list.");
        }
        type = true;

    }  
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnLogin;
    private javax.swing.JTextField jtxtUsername;
    // End of variables declaration//GEN-END:variables
}
class SendEvent implements Runnable{
	Socket s;
	ObjectOutputStream os;
	int x,y;
	boolean click,type;
	String name;
	List<Character> keys;
	SendEvent(Socket s,int x,int y, boolean click,boolean type, List keys, String name, ObjectOutputStream os){
		try{
			this.s = s;
			this.x = x;
			this.y = y;
			this.click = click;
			this.name = name;
			this.os = os;
			this.type = type;
			this.keys = keys;
			new Thread(this).start();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	public void run(){
		try{
		EventsData ed = new EventsData();
		ed.setX(x);
		ed.setY(y);
		ed.setClicked(click);
		ed.setKeys(keys);
		ed.setReceipent(name);
		ed.setTyped(type);
		os.writeObject(ed);
		// System.out.println("Yet To Send Events");
	}
	catch(IOException e){
		e.printStackTrace();
	}
	}
}


