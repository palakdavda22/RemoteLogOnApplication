
import java.io.*;
import java.net.*;
import java.awt.Rectangle;
import java.awt.MouseInfo;
import java.awt.Toolkit;
import java.awt.Point;
import java.awt.Robot;
import java.awt.image.*;
import javax.swing.*;
import java.awt.event.*;
import java.util.*;
import javax.imageio.ImageIO;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dell
 */
public class SendImage extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Login
     */
    Socket s;
    Scanner sc ;
    boolean flag = false;
    Thread t ;
    public SendImage(Socket s) {
        initComponents();
        try{
            this.s = s;
            t = new Thread(this);
	}
	catch(Exception e){
            e.printStackTrace();
	}
       this.setVisible(true);
    }
    public void run(){
        if(flag){
		try{
		System.out.println("Share the screen with: ");
                sc = new Scanner(System.in);
		String name = jtxtUsername.getText();
		ObjectOutputStream os=new ObjectOutputStream(s.getOutputStream());
		while(true){
		
			System.out.println("Sending Image");
		 	Robot r = new Robot();
			Rectangle capture = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
			BufferedImage image = r.createScreenCapture(capture);
			ByteArrayOutputStream bos = new ByteArrayOutputStream();
			ImageIO.write(image, "jpg", bos );
			byte[] data = bos.toByteArray();
			// ImageIcon imageicon = new ImageIcon(image);
			ImageData obj = new ImageData();
			obj.setImage(data);
			obj.setReceipent(name);
			os.writeUnshared(obj);
			System.out.println(obj.getReceipent());
			ObjectInputStream is = new ObjectInputStream(s.getInputStream());

			ReceiveEvent re = new ReceiveEvent(is,s);
			Thread.sleep(100);
		}

	}catch(Exception e){
		e.printStackTrace();
	}
	}
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jtxtUsername = new javax.swing.JTextField();
        jbtnLogin = new javax.swing.JButton();
        jbtnClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Username");

        jbtnLogin.setText("Login");
        jbtnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnLoginActionPerformed(evt);
            }
        });

        jbtnClose.setText("x");
        jbtnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel1)
                        .addGap(103, 103, 103)
                        .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jbtnClose)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(jbtnLogin)
                .addContainerGap(284, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbtnClose, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(137, 137, 137)
                .addComponent(jbtnLogin)
                .addContainerGap(106, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnLoginActionPerformed
        // TODO add your handling code here:
        if(jtxtUsername.getText() != ""){
            flag = true;
            t.start();
            
        }
        else
            JOptionPane.showMessageDialog(this, "USername or password is empty", "Fill", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jbtnLoginActionPerformed
    
    private void jbtnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnCloseActionPerformed
        // TODO add your handling code here:
        int ans = JOptionPane.showConfirmDialog(this, "Are you sure you wanna exit?", "Login",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);
        if(ans == JOptionPane.YES_OPTION){
            setVisible(false); //you can't see me!
            dispose();
        }
    }//GEN-LAST:event_jbtnCloseActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SendImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SendImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SendImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SendImage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jbtnClose;
    private javax.swing.JButton jbtnLogin;
    private javax.swing.JTextField jtxtUsername;
    // End of variables declaration//GEN-END:variables
}
class ReceiveEvent implements Runnable{
	Socket s;
	ObjectInputStream is;
	EventsData ed ;
	ReceiveEvent(ObjectInputStream is, Socket s){
		this.is = is;
		this.s = s;
		new Thread(this).start();
	}
	public void run(){
		try{
		EventsData ed = (EventsData)is.readObject();
		// System.out.println("Event Object Received Successfully " + ed.getX() + " " + ed.getY() + " " + ed.getClicked());
		Robot r = new Robot(); 
         int xi1, yi1, xi, yi; 
  
            // get initial loction 
        Point p = MouseInfo.getPointerInfo().getLocation(); 
        xi = p.x; 
        yi = p.y; 
  
        // get x and y points 
        xi1 = ed.getX(); 
        yi1 = ed.getY(); 
  //       if(xi1 > 0 || yi1 > 0){
  //       // int i = xi, j = yi; 
  
  //           // slowly move the mouse to detined location 
  //           // while (i != xi1 || j != yi1) { 
  //               // move the mouse to the other point 
  //               r.mouseMove(xi1, yi1); 
  //            //Clicks Left mouse button
  //              if(ed.getClicked()){
 	// 		r.mousePress(InputEvent.BUTTON1_DOWN_MASK); 
 	// 		r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
 	// 	System.out.println("Browse button clicked");
 	// }
  // }
  			int i = xi, j = yi; 
  
            // slowly move the mouse to detined location 
            while (i != xi1 || j != yi1) { 
                // move the mouse to the other point 
                r.mouseMove(i, j); 
  
                if (i < xi1) 
                    i+=1; 
                if (j < yi1) 
                    j+=1; 
  
                if (i > xi1) 
                    i-=1; 
                if (j > yi1) 
                    j-=1; 
  
                 
            } 
            if(ed.getClicked() && i==xi1 && j == yi1){
 				r.mousePress(InputEvent.BUTTON1_DOWN_MASK); 
 				r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);
 				// System.out.println("Browse button clicked");
 			}
 			if(ed.getTyped()){
 				System.out.println("Typed");
 				List<Character> list = ed.getKeys();
 				for(Character a: list){
 					System.out.println(a +" types");
 				}
              
			}
		}
		catch(Exception e){
			e.printStackTrace();
		}
 			}
	}
	

